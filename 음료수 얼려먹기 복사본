from collections import deque

d= [(1,0),(-1,0),(0,1),(0,-1),(1,1),(1,-1),(-1,-1),(-1,1)]

def func(m,n,graph):
    
    count = 0
    queue = deque()
    for i in range(n):
        for j in range(m):
            if graph[i][j] == 1:
                count += 1
                
                #bfs
                queue.append((i,j))
                while queue:
                    x, y = queue.popleft()
                    for k in range(8):
                        nx = x + d[k][0]
                        ny = y + d[k][1]

                        if nx < 0 or ny <0 or nx >= n or ny >= m:
                            continue
                        if graph[nx][ny]==0:
                            continue
                        if graph[nx][ny]==1:
                            graph[nx][ny] = 2
                            queue.append((nx,ny))

    return count

countList = []

while 1:
    m,n = map(int,input().split())
    graph = []
    for i in range(n):
        graph.append(list(map(int,input().split())))

    if (m,n) == (0,0):
        break
    else:
        countList.append(func(m,n,graph))

for count in countList:
    print(count)